{"version":3,"sources":["Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Game","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","HEIGHT","WIDTH","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"ySASMA,G,mLAEQ,IAAD,EACYC,KAAKC,MAAdC,EADH,EACGA,EAAGC,EADN,EACMA,EACX,OACI,yBAAKC,UAAU,OAAOC,MAAO,CACzBC,KAAK,GAAD,OAXF,GAWmBJ,EAAI,EAArB,MACJK,IAAI,GAAD,OAZD,GAYkBJ,EAAI,EAArB,MACHK,MAAM,GAAD,OAAKC,GAAL,MACLC,OAAO,GAAD,OAAKD,GAAL,a,GATHE,IAAMC,YAkMVC,E,kDAhLX,aAAe,IAAD,8BACV,gBAOJC,MAAQ,CACJC,MAAO,GACPC,WAAW,EACXC,SAAU,KAXA,EAiDdC,YAAc,SAACC,GAEX,IAAMC,EAAa,EAAKC,mBAClBC,EAAUH,EAAMI,QAAUH,EAAWlB,EACrCsB,EAAUL,EAAMM,QAAUL,EAAWjB,EAErCD,EAAIwB,KAAKC,MAAML,EA9EX,IA+EJnB,EAAIuB,KAAKC,MAAMH,EA/EX,IAiFNtB,GAAK,GAAKA,GAAK,EAAK0B,MAAQzB,GAAK,GAAKA,GAAK,EAAK0B,OAChD,EAAKC,MAAM3B,GAAGD,IAAM,EAAK4B,MAAM3B,GAAGD,IAGtC,EAAK6B,SAAS,CAAEhB,MAAO,EAAKiB,eA9DlB,EAiEdC,QAAU,WACN,EAAKF,SAAS,CAAEf,WAAW,IAC3B,EAAKkB,gBAnEK,EAsEdC,SAAW,WACP,EAAKJ,SAAS,CAAEf,WAAW,IACvB,EAAKoB,iBACLC,OAAOC,aAAa,EAAKF,gBACzB,EAAKA,eAAiB,OA1EhB,EAgIdG,qBAAuB,SAACpB,GACpB,EAAKY,SAAS,CAAEd,SAAUE,EAAMqB,OAAOC,SAjI7B,EAoIdC,YAAc,WACV,EAAKZ,MAAQ,EAAKa,iBAClB,EAAKZ,SAAS,CAAEhB,MAAO,EAAKiB,eAtIlB,EAyIdY,aAAe,WACX,IAAK,IAAIzC,EAAI,EAAGA,EAAI,EAAK0B,KAAM1B,IAC3B,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAK0B,KAAM1B,IAC3B,EAAK4B,MAAM3B,GAAGD,GAAMwB,KAAKmB,UAAY,GAI7C,EAAKd,SAAS,CAAEhB,MAAO,EAAKiB,eA9I5B,EAAKH,KAAOiB,GACZ,EAAKlB,KAAOmB,GAEZ,EAAKjB,MAAQ,EAAKa,iBALR,E,6DAgBV,IADA,IAAIb,EAAQ,GACH3B,EAAI,EAAGA,EAAIH,KAAK6B,KAAM1B,IAAK,CAChC2B,EAAM3B,GAAK,GACX,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK4B,KAAM1B,IAC3B4B,EAAM3B,GAAGD,IAAK,EAItB,OAAO4B,I,yCAIP,IAAMkB,EAAOhD,KAAKiD,SAASC,wBACrBC,EAAMC,SAASC,gBAErB,MAAO,CACHnD,EAAI8C,EAAK1C,KAAO+B,OAAOiB,YAAeH,EAAII,WAC1CpD,EAAI6C,EAAKzC,IAAM8B,OAAOmB,YAAeL,EAAIM,a,kCAM7C,IADA,IAAI1C,EAAQ,GACHZ,EAAI,EAAGA,EAAIH,KAAK6B,KAAM1B,IAC3B,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK4B,KAAM1B,IACvBF,KAAK8B,MAAM3B,GAAGD,IACda,EAAM2C,KAAK,CAAExD,IAAGC,MAK5B,OAAOY,I,qCAmCP,IAHY,IAAD,OACP4C,EAAW3D,KAAK2C,iBAEXxC,EAAI,EAAGA,EAAIH,KAAK6B,KAAM1B,IAC3B,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK4B,KAAM1B,IAAK,CAChC,IAAI0D,EAAY5D,KAAK6D,mBAAmB7D,KAAK8B,MAAO5B,EAAGC,GACnDH,KAAK8B,MAAM3B,GAAGD,GAEVyD,EAASxD,GAAGD,GADE,IAAd0D,GAAiC,IAAdA,EAMlB5D,KAAK8B,MAAM3B,GAAGD,IAAoB,IAAd0D,IACrBD,EAASxD,GAAGD,IAAK,GAMjCF,KAAK8B,MAAQ6B,EACb3D,KAAK+B,SAAS,CAAEhB,MAAOf,KAAKgC,cAE5BhC,KAAKoC,eAAiBC,OAAOyB,YAAW,WACpC,EAAK5B,iBACNlC,KAAKc,MAAMG,Y,yCASCa,EAAO5B,EAAGC,GAGzB,IAFA,IAAIyD,EAAY,EACVG,EAAO,CAAC,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,IACvEC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,IAAME,EAAMH,EAAKC,GACbG,EAAKhE,EAAI+D,EAAI,GACbE,EAAKlE,EAAIgE,EAAI,GAEbE,GAAM,GAAKA,EAAKpE,KAAK4B,MAAQuC,GAAM,GAAKA,EAAKnE,KAAK6B,MAAQC,EAAMqC,GAAIC,IACpER,IAIR,OAAOA,I,+BAsBD,IAAD,SACkC5D,KAAKc,MAApCC,EADH,EACGA,MAAiBC,GADpB,EACUC,SADV,EACoBD,WACzB,OACI,6BACI,yBAAKZ,UAAU,QACXC,MAAO,CAAEG,MA9Kf,IA8K6BE,OA7K5B,IA6K4C2D,eAAe,GAAD,OA/KvD,GA+KuD,cA/KvD,GA+KuD,OACrDC,QAAStE,KAAKkB,YACdqD,IAAK,SAACC,GAAQ,EAAKvB,SAAWuB,IAE7BzD,EAAM0D,KAAI,SAAAC,GAAI,OACX,kBAAC,EAAD,CAAMxE,EAAGwE,EAAKxE,EAAGC,EAAGuE,EAAKvE,EAAGwE,IAAG,UAAKD,EAAKxE,EAAV,YAAewE,EAAKvE,SAI3D,yBAAKC,UAAU,YAAf,gBACiB,2BAAOqC,MAAOzC,KAAKc,MAAMG,SAAU2D,SAAU5E,KAAKuC,uBADnE,QAEKvB,EACG,4BAAQZ,UAAU,SAASkE,QAAStE,KAAKmC,UAAzC,QACA,4BAAQ/B,UAAU,SAASkE,QAAStE,KAAKiC,SAAzC,OAEJ,4BAAQ7B,UAAU,SAASkE,QAAStE,KAAK4C,cAAzC,UACA,4BAAQxC,UAAU,SAASkE,QAAStE,KAAK0C,aAAzC,e,GA1KD/B,IAAMC,WCRViE,E,uKATP,OACI,yBAAKzE,UAAU,OACX,4CACA,kBAAC,EAAD,W,GAPEQ,aCMZkE,EAAcC,QACY,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7E,QACfuE,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzElEC,IAASC,OAAO,kBAAC,EAAD,MAAShD,SAASiD,eAAe,SDcjC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,cAAwBlE,OAAO2C,UAC3CwB,SAAWnE,OAAO2C,SAASwB,OAIvC,OAGFnE,OAAOoE,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,cAAN,sBAEPzB,IAiDV,SAAiCM,GAE/BsB,MAAMtB,GACHI,MAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BnD,OAAO2C,SAASkC,eAKpB/B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCzCzBgC,K","file":"static/js/main.636ad165.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Game.css';\r\n\r\n\r\nconst CELL_SIZE = 20;\r\nconst WIDTH = 800;\r\nconst HEIGHT = 600;\r\n\r\n\r\nclass Cell extends React.Component {\r\n\r\n    render() {\r\n        const { x, y } = this.props;\r\n        return (\r\n            <div className=\"Cell\" style={{\r\n                left: `${CELL_SIZE * x + 1}px`,\r\n                top: `${CELL_SIZE * y + 1}px`,\r\n                width: `${CELL_SIZE - 1}px`,\r\n                height: `${CELL_SIZE - 1}px`,\r\n            }} />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.rows = HEIGHT / CELL_SIZE;\r\n        this.cols = WIDTH / CELL_SIZE;\r\n\r\n        this.board = this.makeEmptyBoard();\r\n    }\r\n\r\n    state = {\r\n        cells: [],\r\n        isRunning: false,\r\n        interval: 100,\r\n    }\r\n\r\n    makeEmptyBoard() {\r\n        let board = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            board[y] = [];\r\n            for (let x = 0; x < this.cols; x++) {\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    getElementOffset() {\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return {\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\r\n        };\r\n    }\r\n\r\n    makeCells() {\r\n        let cells = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                if (this.board[y][x]) {\r\n                    cells.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    handleClick = (event) => {\r\n\r\n        const elemOffset = this.getElementOffset();\r\n        const offsetX = event.clientX - elemOffset.x;\r\n        const offsetY = event.clientY - elemOffset.y;\r\n        \r\n        const x = Math.floor(offsetX / CELL_SIZE);\r\n        const y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    runGame = () => {\r\n        this.setState({ isRunning: true });\r\n        this.runIteration();\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.setState({ isRunning: false });\r\n        if (this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    runIteration() {\r\n        let newBoard = this.makeEmptyBoard();\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                let neighbors = this.calculateNeighbors(this.board, x, y);\r\n                if (this.board[y][x]) {\r\n                    if (neighbors === 2 || neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    } else {\r\n                        newBoard[y][x] = false;\r\n                    }\r\n                } else {\r\n                    if (!this.board[y][x] && neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newBoard;\r\n        this.setState({ cells: this.makeCells() });\r\n\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    /**\r\n     * Calculate the number of neighbors at point (x, y)\r\n     * @param {Array} board \r\n     * @param {int} x \r\n     * @param {int} y \r\n     */\r\n    calculateNeighbors(board, x, y) {\r\n        let neighbors = 0;\r\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0];\r\n            let x1 = x + dir[1];\r\n\r\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n                neighbors++;\r\n            }\r\n        }\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    handleIntervalChange = (event) => {\r\n        this.setState({ interval: event.target.value });\r\n    }\r\n\r\n    handleClear = () => {\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    handleRandom = () => {\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.board[y][x] = (Math.random() >= 0.5);\r\n            }\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    render() {\r\n        const { cells, interval, isRunning } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"Board\"\r\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\r\n                    onClick={this.handleClick}\r\n                    ref={(n) => { this.boardRef = n; }}>\r\n\r\n                    {cells.map(cell => (\r\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"controls\">\r\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec\r\n                    {isRunning ?\r\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\r\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\r\n                    }\r\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\r\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Game from './Game';\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Game of Life</h1>\r\n                <Game />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n   window.location.hostname === 'localhost' ||\r\n     // [::1] is the IPv6 localhost address.\r\n     window.location.hostname === '[::1]' ||\r\n     // 127.0.0.1/8 is considered localhost for IPv4.\r\n     window.location.hostname.match(\r\n       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n     )\r\n );\r\n \r\n export default function register() {\r\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n     // The URL constructor is available in all browsers that support SW.\r\n     const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n     if (publicUrl.origin !== window.location.origin) {\r\n       // Our service worker won't work if PUBLIC_URL is on a different origin\r\n       // from what our page is served on. This might happen if a CDN is used to\r\n       // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n       return;\r\n     }\r\n \r\n     window.addEventListener('load', () => {\r\n       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n \r\n       if (isLocalhost) {\r\n         // This is running on localhost. Lets check if a service worker still exists or not.\r\n         checkValidServiceWorker(swUrl);\r\n \r\n         // Add some additional logging to localhost, pointing developers to the\r\n         // service worker/PWA documentation.\r\n         navigator.serviceWorker.ready.then(() => {\r\n           console.log(\r\n             'This web app is being served cache-first by a service ' +\r\n               'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n           );\r\n         });\r\n       } else {\r\n         // Is not local host. Just register service worker\r\n         registerValidSW(swUrl);\r\n       }\r\n     });\r\n   }\r\n }\r\n \r\n function registerValidSW(swUrl) {\r\n   navigator.serviceWorker\r\n     .register(swUrl)\r\n     .then(registration => {\r\n       registration.onupdatefound = () => {\r\n         const installingWorker = registration.installing;\r\n         installingWorker.onstatechange = () => {\r\n           if (installingWorker.state === 'installed') {\r\n             if (navigator.serviceWorker.controller) {\r\n               // At this point, the old content will have been purged and\r\n               // the fresh content will have been added to the cache.\r\n               // It's the perfect time to display a \"New content is\r\n               // available; please refresh.\" message in your web app.\r\n               console.log('New content is available; please refresh.');\r\n             } else {\r\n               // At this point, everything has been precached.\r\n               // It's the perfect time to display a\r\n               // \"Content is cached for offline use.\" message.\r\n               console.log('Content is cached for offline use.');\r\n             }\r\n           }\r\n         };\r\n       };\r\n     })\r\n     .catch(error => {\r\n       console.error('Error during service worker registration:', error);\r\n     });\r\n }\r\n \r\n function checkValidServiceWorker(swUrl) {\r\n   // Check if the service worker can be found. If it can't reload the page.\r\n   fetch(swUrl)\r\n     .then(response => {\r\n       // Ensure service worker exists, and that we really are getting a JS file.\r\n       if (\r\n         response.status === 404 ||\r\n         response.headers.get('content-type').indexOf('javascript') === -1\r\n       ) {\r\n         // No service worker found. Probably a different app. Reload the page.\r\n         navigator.serviceWorker.ready.then(registration => {\r\n           registration.unregister().then(() => {\r\n             window.location.reload();\r\n           });\r\n         });\r\n       } else {\r\n         // Service worker found. Proceed as normal.\r\n         registerValidSW(swUrl);\r\n       }\r\n     })\r\n     .catch(() => {\r\n       console.log(\r\n         'No internet connection found. App is running in offline mode.'\r\n       );\r\n     });\r\n }\r\n \r\n export function unregister() {\r\n   if ('serviceWorker' in navigator) {\r\n     navigator.serviceWorker.ready.then(registration => {\r\n       registration.unregister();\r\n     });\r\n   }\r\n }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}